import{_ as k,c as g,a as s,d as n,b as a,e,w as l,r as p,o as d}from"./app-CIjlP0IS.js";const o="/assets/2025-05-15_16-44-21-C-GPmjkB.png",c="/assets/2025-05-15_16-45-15-BJUdbXfc.png",u="/assets/2025-05-15_16-45-49-D6bSzKOY.png",D="/assets/2025-05-15_16-46-24-Bo3W2G7B.png",y="/assets/2025-05-15_16-47-10-BCHq1q_7.png",v="/assets/2025-05-15_16-47-57-CccMq0rN.png",C="/assets/2025-05-15_16-48-29-C6tMi1Yo.png",m="/assets/2025-05-15_16-49-48-DKrZSCKi.png",f="/assets/2025-05-15_16-51-55-DhgLSu7C.png",E="/assets/2025-05-15_16-52-12-Bi0q0QRz.png",b="/assets/2025-05-15_17-00-01--Meja2ZY.png",_="/assets/2025-05-15_17-02-32-DxDxO3oT.png",x="/assets/2025-05-15_17-05-52-BIKkna2b.png",P="/assets/2025-05-15_17-06-42-BtDzh3Y8.png",A={};function F(q,i){const h=p("VPIcon"),t=p("VPLink"),r=p("RepoCard");return d(),g("div",null,[s("p",null,[i[3]||(i[3]=e("编写者：",-1)),a(t,{href:"/friends/persons/"},{default:l(()=>[a(h,{provider:"iconify",name:"noto:red-heart"}),i[0]||(i[0]=e("Lily",-1))]),_:1,__:[0]}),i[4]||(i[4]=e()),a(t,{href:"/friends/persons/"},{default:l(()=>[a(h,{provider:"iconify",name:"noto:red-heart"}),i[1]||(i[1]=e("rand777",-1))]),_:1,__:[1]}),i[5]||(i[5]=e()),a(t,{href:"/friends/persons/"},{default:l(()=>[a(h,{provider:"iconify",name:"noto:red-heart"}),i[2]||(i[2]=e("李徵",-1))]),_:1,__:[2]})]),i[8]||(i[8]=n('<div class="hint-container note"><p class="hint-container-title">本文已完成，等待校对</p></div><p><a href="https://pypi.org/" target="_blank" rel="noopener noreferrer">PYPI(The Python Package Index)</a> 索引着全世界的 Python 包，Python 官方使用 pip 来管理这些包，不过因为性能、包与包之间的依赖管理等问题让社区有理由发展更好的工具。现在出现了许许多多新型的包管理器 (Package Manager) ，目前最推荐 uv。当然，其他的包管理器 (如 pip, Poetry, Conda) 也有其独特的优势和使用场景。</p><h2 id="astral-uv" tabindex="-1"><a class="header-anchor" href="#astral-uv"><span>Astral-UV</span></a></h2>',3)),a(r,{repo:"astral-sh/uv"}),i[9]||(i[9]=n('<p><a href="https://docs.astral.sh/uv/getting-started/installation/" target="_blank" rel="noopener noreferrer">官方文档</a></p><h3 id="windows" tabindex="-1"><a class="header-anchor" href="#windows"><span>Windows</span></a></h3><h4 id="通过pip安装" tabindex="-1"><a class="header-anchor" href="#通过pip安装"><span>通过pip安装</span></a></h4><p>如果你根据 Python 官方教程安装了特定版本的 Python，可以使用 pip 直接进行安装</p><div class="vp-steps"><ol><li><p>打开命令提示符，输入以下命令</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> uv</span></span></code></pre></div><p>安装成功后，将uv添加到环境变量，这样即使切换到虚拟环境也可以使用:</p></li><li><p>打开命令提示符窗口，输入</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">where</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> uv</span></span></code></pre></div><p>找到uv的存储位置并复制到文件资源管理器的搜索栏，</p><p><img src="'+o+'" alt="2025-05-15_16-44-21.png" width="991" height="526"></p></li><li><p>直接在电脑搜索栏中，搜索&quot;控制面板&quot;，打开&quot;控制面板&quot;</p></li><li><p>点击&quot;系统与安全&quot;</p><p><img src="'+c+'" alt="2025-05-15_16-45-15.png" width="761" height="599"></p></li><li><p>点击&quot;系统&quot;</p><p><img src="'+u+'" alt="2025-05-15_16-45-49.png" width="956" height="414"></p></li><li><p>点击&quot;高级系统&quot;</p><p><img src="'+D+'" alt="2025-05-15_16-46-24.png" width="729" height="614"></p></li><li><p>点击&quot;环境变量&quot;</p><p><img src="'+y+'" alt="2025-05-15_16-47-10.png" width="592" height="339"></p></li><li><p>点击&quot;Path&quot;,点击&quot;编辑&quot;</p><p><img src="'+v+'" alt="2025-05-15_16-47-57.png" width="755" height="301"></p></li><li><p>点击&quot;新建&quot;,粘贴复制的Scripts文件地址，然后一路点确定</p><p><img src="'+C+'" alt="2025-05-15_16-48-29.png" width="662" height="473"></p></li></ol></div><h4 id="通过powershell安装" tabindex="-1"><a class="header-anchor" href="#通过powershell安装"><span>通过Powershell安装</span></a></h4><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">powershell</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> -ExecutionPolicy</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> ByPass</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> &quot;irm https://astral.sh/uv/install.ps1 | iex&quot;</span></span></code></pre></div><p>最后打开一个新的命令提示符窗口，输入以下命令，验证更改</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">uv</span></span></code></pre></div><p><img src="'+m+`" alt="2025-05-15_16-49-48.png" width="935" height="578"></p><p>出现这样的信息则表示添加成功</p><ul><li>PowerShell脚本安装</li></ul><p>1.打开 PowerShell ,执行以下代码:</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">irm</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> https://astral.sh/uv/install.ps1</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> iex</span></span></code></pre></div><p>2.输入以下代码查看是否安装成功:</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">uv</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> --version</span></span></code></pre></div><p>这样就可以查看安装的UV版本</p><ul><li>使用pipx:</li></ul><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">pipx</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> uv</span></span></code></pre></div><p>安装完成后打开新的终端窗口，运行uv --version来验证是否安装成功</p><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux"><span>Linux</span></a></h3><div class="vp-steps"><ol><li><p>打开终端，输入以下命令:</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> curl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> -LsSf</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> https://astral.sh/uv/install.sh</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;"> sh</span></span></code></pre></div><p><img src="`+f+'" alt="2025-05-15_16-51-55.png" width="722" height="265"></p></li><li><p>验证</p><p>输入以下命令验证是否安装成功:</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">uv</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> --version</span></span></code></pre></div><p><img src="'+E+'" alt="2025-05-15_16-52-12.png" width="276" height="69"></p><p>若显示uv的版本信息，则表示安装成功</p></li></ol></div><h3 id="uv的基础用法" tabindex="-1"><a class="header-anchor" href="#uv的基础用法"><span>UV的基础用法</span></a></h3><div class="vp-steps"><ol><li><p>创建虚拟环境</p><p>打开命令提示符，输入以下命令,创建虚拟环境:</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> venv</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> .venv</span></span></code></pre></div><p>激活环境:</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">.venv\\Scripts\\activate</span></span></code></pre></div><p><img src="'+b+`" alt="2025-05-15_17-00-01.png" width="695" height="174"></p></li><li><p>兼容pip常用命令</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">#安装一个包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> install</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">packag</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span></span></code></pre></div><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">#卸载包</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> uninstall</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">packag</span><span style="--shiki-light:#24292E;--shiki-dark:#D4D4D4;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;">&gt;</span></span></code></pre></div><p><img src="`+_+`" alt="2025-05-15_17-02-32.png" width="502" height="214"></p></li><li><p>依赖编译和锁定</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">#使用uv pip freeze &gt;命令生成requirements.txt文件，这个命令会列出当前虚拟环境中所有已安装的包以及版本号，并将它们写入到文件中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> freeze</span><span style="--shiki-light:#D73A49;--shiki-dark:#D4D4D4;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;">requirements.txt</span></span></code></pre></div><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A9955;">#uv pip compile会读取requirements.txt文件中的依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> compile</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> requirments.txt</span><span style="--shiki-light:#005CC5;--shiki-dark:#569CD6;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> require</span></span></code></pre></div><p><img src="`+x+'" alt="2025-05-15_17-05-52.png" width="966" height="185"></p></li><li><p>本地项目包管理</p><p>如果你需要管理本地项目依赖，可以使用 uv add 命令</p><div class="language-shell" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#24292e;--shiki-dark:#D4D4D4;--shiki-light-bg:#fff;--shiki-dark-bg:#1E1E1E;"><pre class="shiki shiki-themes github-light dark-plus vp-code"><code class="language-shell"><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCDCAA;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#CE9178;"> numpy</span></span></code></pre></div><p><img src="'+P+'" alt="2025-05-15_17-06-42.png" width="449" height="89"></p></li></ol></div><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结"><span>小结</span></a></h3><p>UV是是一个用 Rust 编写的现代 Python 打包工具，它的核心目标是极速替代 pip、pip-tools 和 venv 等工具的功能。</p><p>如果你厌倦了等待 pip 解析和安装依赖，那么 uv 绝对值得你尝试。开始使用 uv venv 和 uv pip install ,体验一下“瞬间”完成依赖安装的快感吧！</p><h2 id="配置镜像" tabindex="-1"><a class="header-anchor" href="#配置镜像"><span>配置镜像</span></a></h2>',28)),s("p",null,[i[7]||(i[7]=e("参考",-1)),a(t,{href:"/public-service/cqmu-mirror/wiki/#pypi"},{default:l(()=>i[6]||(i[6]=[e(" PYPI 镜像配置",-1)])),_:1,__:[6]})]),i[10]||(i[10]=s("h3",{id:"其他参考资料",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#其他参考资料"},[s("span",null,"其他参考资料")])],-1)),i[11]||(i[11]=s("ul",null,[s("li",null,[s("a",{href:"https://blog.rand777.space/article/20250717/",target:"_blank",rel:"noopener noreferrer"}," rand777 的博客")])],-1))])}const I=k(A,[["render",F]]),Y=JSON.parse('{"path":"/csdiy/program-begin/PYPI-mirror/","title":"PYPI包管理","lang":"zh-CN","frontmatter":{"title":"PYPI包管理","createTime":"2025/04/28 00:19:22","permalink":"/csdiy/program-begin/PYPI-mirror/","icon":"devicon:pypi","description":"编写者： 本文已完成，等待校对 PYPI(The Python Package Index) 索引着全世界的 Python 包，Python 官方使用 pip 来管理这些包，不过因为性能、包与包之间的依赖管理等问题让社区有理由发展更好的工具。现在出现了许许多多新型的包管理器 (Package Manager) ，目前最推荐 uv。当然，其他的包管理器 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"PYPI包管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-11T05:41:01.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://docs.pguide.dev/csdiy/program-begin/PYPI-mirror/"}],["meta",{"property":"og:site_name","content":"PGuide Docs"}],["meta",{"property":"og:title","content":"PYPI包管理"}],["meta",{"property":"og:description","content":"编写者： 本文已完成，等待校对 PYPI(The Python Package Index) 索引着全世界的 Python 包，Python 官方使用 pip 来管理这些包，不过因为性能、包与包之间的依赖管理等问题让社区有理由发展更好的工具。现在出现了许许多多新型的包管理器 (Package Manager) ，目前最推荐 uv。当然，其他的包管理器 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-11T05:41:01.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-11T05:41:01.000Z"}]]},"readingTime":{"minutes":3.39,"words":1016},"git":{"createdTime":1745774075000,"updatedTime":1754890861000,"contributors":[{"name":"rand777gg","username":"rand777gg","email":"losmosga@foxmail.com","commits":10,"avatar":"https://avatars.githubusercontent.com/rand777gg?v=4","url":"https://github.com/rand777gg"},{"name":"Lilyxxcccc","username":"Lilyxxcccc","email":"2712950900@qq,com","commits":3,"avatar":"https://avatars.githubusercontent.com/Lilyxxcccc?v=4","url":"https://github.com/Lilyxxcccc"}]},"autoDesc":true,"filePathRelative":"notes/CS-DIY/2.编程入门/2.环境配置/PYPI配置镜像.md","headers":[],"bulletin":true}');export{I as comp,Y as data};
